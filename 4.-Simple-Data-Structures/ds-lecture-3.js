// Строки и их свойства

// к строкам нельзя добавлять свойства!

let Kim = "Ким";
Kim.age = 88;
console.log(Kim.age) //undefined

// Методы slice и indexOf как у массивов
// при этом indexOf может искать не только один элемент (символ), но и подстроку

"один два три".indexOf("ри"); //10

// Метод trim удаляет пробельные символы

"	окей \n ".trim(); //"окей"

// Реализованная нами функция zeroPad существует и называется padStart,
// она принимает желаемую длину и символ заполнения:

String(6).padStart(3, "0"); //006

// Функция split разделяет строку на части в местах, где встречаются заданные символы,
// и возвращает массив строк
// Функция join соединяет строки в одну, разделяя их заданным символом:

let sentence = "птицы-секретари умеют громко топтать";
let words = sentence.split(" "); // ["птицы-секретари", "умеют", "громко", "топтать"]
let word = words.join(", ");

// Метод repeat повторяет строку заданное число раз:

"ЛА".repeat(3); //ЛАЛАЛА



// Дополнительные параметры

// Возможность функции принимать произвольное число параметров -
// нужно поставить ... перед её последним параметром.
// это будет остаточный параметр, он привязывается к массиву, содержащему
// все остальные аргументы.
// Если перед ним есть другие параметры, то они не считаются частью массива.

function max(...numbers) {
	let result = -Infinity;
	for (let number of numbers) {
		if (number > result) result = number;
	}
	return result;
}

max(4, 1, 9, -2); // 9

// таким же образом этой функции можно передать массив:

let numbers = [5, 1, 7];
max(...numbers); // 7
max(9, ...numbers, 2); // 9



// Объект Math

Math.max;
Math.min;
Math.sqrt;
Math.cos;
Math.sin;
Math.tan;
Math.PI;

// Функция Math.random
// при каждом вызове она возвращает новое псевдослучайное число
// от нуля (включ.) до одного (исключ.)

Math.random(); //0.3699372936714856

// Функция Math.floor - округляет число в меньшую сторону до ближайшего целого
// Math.ceil - округляет до ближайшего большего целого

Math.floor(Math.random * 10); // диапозон целых чисел от 0 до 9


// Деструктурирование

// Существует возможность упростить функцию phi:

function phi(table) {
	return (table[3] * table[0] - table[2] * table[1]) /
		Math.sqrt((table[2] + table[3]) * (table[0] + table[1]) * 
			(table[1] + table[3]) * (table[0] + table[2]));
}

// С помощью привязок:

function phi([n00, n01, n10, n11]) {
	return (n11 * n00 - n10 * n01) /
		Math.sqrt((n10 + n11) * (n00 + n01) *
			(n01 + n11) * (n00 + n10));
}

// подобные привязки работают с let, var, const:
// можно назначить привязку объекту на его содержимое:

let {name_} = {name: "Фараджи", age: 23};
console.log(name_); // Фараджи


// JSON

// сериализовать данные - преобразовать их, представив в виде иерархического описания.
// популярный формат - JSON (JavaScript Object Notation) - используется для хранения и обмена
// данными в интернете

// все имена свойств должны быть заключены в двойные кавычки,
// допускаются только простые выражения данных без вычислений

/*
{
	"squirrel": false;
	"events": ["работал", "трогал", "лапал"]
}
*/

let string = JSON.stringify({squirrel: false, events: ["выходной"]});

console.log(string);
// {"suirrel":false,"events":["выходной"]}
JSON.parse(stirng).events; // ["выходной"]
