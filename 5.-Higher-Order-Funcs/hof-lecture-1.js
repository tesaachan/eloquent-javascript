// Функции высших порядков

let total = 0, count = 1;
while (count <= 10) {
	total += count;
	count++;
}
console.log(total);

// лучше использовать для этой цели:

console.log(sum(range(1, 10)));

// Мы пишем программы, опираясь на внешние функции - определения терминов
// из данного словаря (например, функции sum и range)

// такие словари обычно называют абстракциями. Абстракции скрывают детали
// и позволяют обсуждать пробелмы на более высоком (более абстрактном) уровне


// Абстрагирование повторов

// сделать "что-то" n раз:

function repeat(n, action) {
	for (let i = 0; i < n; ++i) {
		action(i);
	}
}

repeat(3, console.log);

// необязательно передавать функции уже объявленную функцию:

let labels = [];
repeat(5, i => {
	labels.push(`Блок ${i + 1}`);
});

console.log(labels);


// Функции высшего порядка

// такие функции работают с другими функциями, принимая их
// в качестве аргументов, либо возвращая их.

// Существуют функции, создающие новые функции:

function greaterThan(n) {
	return m => m > n;
}
let greaterThan10 = greaterThan(10);
greaterThan10(11); // true

// Существуют функции, изменяющие другие функции:

function noisy(f) {
	return (...args) => {
		console.log("вызов для", args);
		let result = f(...args);
		console.log("вызов для", args, " возвращает", result);
		return result;
	};
}

noisy(Math.min)(3, 2, 1);
// вызов для [3, 2, 1]
// вызов для [3, 2, 1] возвращает 1

// Функции, которые задают новые типы последовательности выполнения:

function unless(test, then) {
	if (!test) then();
}
repeat(3, n => {
	unless(n % 2 == 1, () => {
		console.log(n, " - четное число");
	});
});
// 0 - четное число
// 2 - четное число

// Встроенный метод forEach - нечто вроде for/of в виде hof:

["A", "B"].forEach(l => console.log(l));
// A
// B
